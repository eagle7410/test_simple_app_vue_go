/*
 * Fast api desc
 *
 *  This is a sample server Petstore server.  You can find out more about      Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * API version: 1.0.0
 * Contact: verycooleagle@gamail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"fmt"
	"github.com/gorilla/mux"
	"io/ioutil"
	"log"
	"net/http"
)

const MessageOk = "Successful operation"

func sendJsonMessage (w http.ResponseWriter,  code int, message string, payload interface{}) {
	var data []byte

	w.WriteHeader(code)

	if payload == nil {
		data, _ =json.Marshal(ApiResponse{
			Code: code,
			Message: message,
		})
	} else {
		data, _ = json.Marshal(ApiResponse{
			Code: code,
			Message: message,
			Data: payload,
		})
	}

	fmt.Fprintf(w, string(data))
}

func logErr (err error) {
	log.Printf("[0;31m DatabaseError: %s [39m \n", err)
}

func CreateUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	body, err := ioutil.ReadAll(r.Body)

	if err != nil {
		sendJsonMessage(w,  http.StatusBadRequest, "Bad request", nil)
		return
	}

	user := User{}

	err = json.Unmarshal(body, &user)

	if err != nil {
		sendJsonMessage(w, http.StatusBadRequest, "Bad request json", nil)
		return
	}

	user.IsNew = true

	_, err = user.Save()

	if err != nil {
		sendJsonMessage(w, http.StatusInternalServerError, "Not user save to database", nil)
		logErr(err)

		return
	}

	sendJsonMessage(w, http.StatusOK, MessageOk, nil)

}

func DeleteUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	fmt.Fprintf(w, MessageOk)
}

func GetUserByName(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	vars := mux.Vars(r)
	username := vars["username"] // the book title slug

	user := User{IsNew:false,}

	err := user.LoadByName(username)

	if err != nil {

		if IsDbQueryEmpty(err) {
			sendJsonMessage(w, http.StatusNotFound, "User "+ username +" not found ", nil)
			return
		}

		sendJsonMessage(w, http.StatusInternalServerError, "Not load user from database", nil)
		logErr(err)

		return
	}
	fmt.Println(user)
	sendJsonMessage(w, http.StatusOK, MessageOk, user)
}

func LoginUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func LogoutUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UpdateUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
